# z kodu dr. Teisseyre'a
th = sort(c(prob))
TPR = numeric(length(th))
FPR = numeric(length(th))
for (i in 1:(length(th) - 1)) {
print(i)
pred = ifelse(prob > th[i], 1, 0)
tab = table(actual, pred)
TPR[i] = tab[2, 2] / sum(tab[2, ])
FPR[i] = tab[1, 2] / sum(tab[1, ])
}
# ROC
plot(
FPR,
TPR,
type = "l",
ylim = c(0, 1),
xlim = c(0, 1),
xlab = "FPR",
ylab = "TPR",
main = "Krzywa ROC",
lwd = 2,
col = "orange"
)
# c
bmi = c(20, 25, 30)
age = 1:100
probability = age.est * age + mass.est*bmi[1]
data = data.frame(age, probability)
ggplot(data = data, aes(x = data$age, y = data$probability)) +
geom_line(color = data)
ggplot(data = data, aes(x = data$age, y = data$probability)) +
geom_line()
age = 1:100
probability = age.est * age + mass.est*bmi[1]
ggplot(data = data.frame(age, probability), aes(x = data$age, y = data$probability)) +
geom_line()
# c
library(ggplot2)
bmi = c(20, 25, 30)
age = 1:100
probability = age.est * age + mass.est*bmi[1]
ggplot(data = data.frame(age, probability), aes(x = data$age, y = data$probability)) +
geom_line()
probability = age.est * age + mass.est*bmi[2]
ggplot(data = data.frame(age, probability), aes(x = data$age, y = data$probability)) +
geom_line()
probability = age.est * age + mass.est*bmi[3]
ggplot(data = data.frame(age, probability), aes(x = data$age, y = data$probability)) +
geom_line()
probability = age.est * age + mass.est*bmi[3]
probability
age.est * age + mass.est*bmi[2]
ggplot(data = data.frame(age, probability), aes(x = data$age, y = data$probability)) +
geom_line(color = "blue")
age = 1:100
probability = age.est * age + mass.est*bmi[1]
ggplot(data = data.frame(age, probability), aes(x = data$age, y = data$probability)) +
geom_line(color = "red")
probability = age.est * age + mass.est*bmi[2]
ggplot(data = data.frame(age, probability), aes(x = data$age, y = data$probability)) +
geom_line(color = "green")
probability = age.est * age + mass.est*bmi[3]
ggplot(data = data.frame(age, probability), aes(x = data$age, y = data$probability)) +
geom_line(color = "blue")
age = 1:100
probability = age.est * age + mass.est*bmi[1]
ggplot(data = data.frame(age, probability), aes(x = data$age, y = data$probability)) +
geom_point(color = "red")
probability = age.est * age + mass.est*bmi[2]
ggplot(data = data.frame(age, probability), aes(x = data$age, y = data$probability)) +
geom_point(color = "green")
probability = age.est * age + mass.est*bmi[3]
ggplot(data = data.frame(age, probability), aes(x = data$age, y = data$probability)) +
geom_point(color = "blue")
age = 28
mass.est = 0.09825
age.est = 0.04561
age.std_err = 0.00694
mass.std_err = 0.01248
intercept = -5.40378
patient.mass = 30
patient.age = 30
result = patient.mass * mass.est + patient.age * age.est + intercept
result
# c
library(ggplot2)
bmi = c(20, 25, 30)
age = 1:100
probability = age.est * age + mass.est*bmi[1] + intercept
data = data.frame(age, probability)
ggplot(data = data, aes(x = data$age, y = data$probability)) +
geom_point(color = "red")
posteriori_class1
posteriori_class0
library(ggplot2)
library(lattice)
library(microbenchmark)
data = data.frame(x= runif(100), y = runif(100))
ggplot(data=data, aes(x=data$x, y=data$y)) +
geom_line()
xyplot(y ~ x, data, type = c("smooth"))
plot(data$x,data$y, type="l")
lines(data$x,data$y, type="l")
lines(data$x,data$y, type="l")
source('h:/Windows7/Desktop/Programowanie w R dla Zaawansowanych/2020Z-ProgramowanieWR/PraceDomowe/PD1/SawickiJan/homework1.R')
lines(data$x, data$y, type = "l")
lines(data$x, data$y, type = "l")
plot()
lines(data$x, data$y, type = "l")
plot(data$x, data$y)
lines(data$x, data$y, type = "l")
plot(data$x, data$y)
plot(data$x, data$y)
lines(data$x, data$y, type = "l")
library(ggplot2)
library(lattice)
library(microbenchmark)
data = data.frame(x = runif(100), y = runif(100))
microbenchmark(ggplot_point = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_point(),
ggplot_line = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_line(),
lattice_point = xyplot(y ~ x, data),
lattice_line = xyplot(y ~ x, data, type = c("smooth")),
graphics_point = lines(data$x, data$y, type = "l"),
graphics_line = lines(data$x, data$y))
barplot(data$x, data$y)
microbenchmark(ggplot_point = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_point(),
ggplot_line = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_line(),
lattice_point = xyplot(y ~ x, data),
lattice_line = xyplot(y ~ x, data, type = c("smooth")),
graphics_point = lines(data$x, data$y, type = "l"),
graphics_line = lines(data$x, data$y),)
ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_bar()
ggplot_line = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_bar(stat = "identity")
ggplot_line
ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_bar(stat = "identity")
ggplot(data = data, aes(x = data$x, y = data$y, col = data$x)) +
geom_bar(stat = "identity")
barplot(data$x, data$y)
barchart(y~x)
barchart(y~x, data)
microbenchmark(ggplot_point = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_point(),
ggplot_line = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_line(),
ggplot_bar = ggplot(data = data, aes(x = data$x, y = data$y, col = data$x)) +
geom_bar(stat = "identity"),
lattice_point = xyplot(y ~ x, data),
lattice_line = xyplot(y ~ x, data, type = c("smooth")),
lattice_bar = barchart(y~x, data),
graphics_point = lines(data$x, data$y, type = "l"),
graphics_line = lines(data$x, data$y),
graphics_barplot = barplot(data$x, data$y))
barplot(data$x, data$y)
library(ggplot2)
library(lattice)
library(microbenchmark)
data = data.frame(x = runif(100), y = runif(100))
measurements = microbenchmark(
ggplot_point = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_point(),
ggplot_line = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_line(),
ggplot_bar = ggplot(data = data, aes(
x = data$x, y = data$y, col = data$x
)) +
geom_bar(stat = "identity"),
lattice_point = xyplot(y ~ x, data),
lattice_line = xyplot(y ~ x, data, type = c("smooth")),
lattice_bar = barchart(y ~ x, data),
graphics_point = lines(data$x, data$y, type = "l"),
graphics_line = lines(data$x, data$y),
graphics_barplot = barplot(data$x, data$y)
)
ggplot(data = measurements, aes(x = expr, y = mean, col = mean)) +
geom_bar()
library(ggplot2)
library(lattice)
library(microbenchmark)
data = data.frame(x = runif(100), y = runif(100))
measurements = microbenchmark(
ggplot_point = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_point(),
ggplot_line = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_line(),
ggplot_bar = ggplot(data = data, aes(
x = data$x, y = data$y, col = data$x
)) +
geom_bar(stat = "identity"),
lattice_point = xyplot(y ~ x, data),
lattice_line = xyplot(y ~ x, data, type = c("smooth")),
lattice_bar = barchart(y ~ x, data),
graphics_point = lines(data$x, data$y, type = "l"),
graphics_line = lines(data$x, data$y),
graphics_barplot = barplot(data$x, data$y)
)
ggplot(data = measurements, aes(x = expr, y = mean, col = mean)) +
geom_bar()
plot()
measurements = microbenchmark(
ggplot_point = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_point(),
ggplot_line = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_line(),
ggplot_bar = ggplot(data = data, aes(
x = data$x, y = data$y, col = data$x
)) +
geom_bar(stat = "identity"),
lattice_point = xyplot(y ~ x, data),
lattice_line = xyplot(y ~ x, data, type = c("smooth")),
lattice_bar = barchart(y ~ x, data),
graphics_point = lines(data$x, data$y, type = "l"),
graphics_line = lines(data$x, data$y),
graphics_barplot = barplot(data$x, data$y)
)
lines(data$x, data$y, type = "l")
plot(x, y, type="n")
plot(data$x, data$y, type="n")
plot(data$x, data$y, data type="n")
plot(data$x, data$y, data, type="n")
plot(x, y, data, type="n")
data = data.frame(x = runif(100), y = runif(100))
plot(x, y, data, type="n")
plot(data$x, data$y)
plot(data$x, data$y, type = "h")
plot(data$x, data$y, type = "p")
plot(data$x, data$y, type = "l")
plot(data$x, data$y, type = "h")
library(ggplot2)
library(lattice)
library(microbenchmark)
data = data.frame(x = runif(100), y = runif(100))
measurements = microbenchmark(
ggplot_point = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_point(),
ggplot_line = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_line(),
ggplot_bar = ggplot(data = data, aes(
x = data$x, y = data$y, col = data$x
)) +
geom_bar(stat = "identity"),
lattice_point = xyplot(y ~ x, data),
lattice_line = xyplot(y ~ x, data, type = c("smooth")),
lattice_bar = barchart(y ~ x, data),
graphics_point = plot(data$x, data$y, type = "p"),
graphics_line = plot(data$x, data$y, type = "l"),
graphics_barplot = plot(data$x, data$y, type = "h")
)
ggplot(data = measurements, aes(x = expr, y = mean, col = mean)) +
geom_bar()
ggplot(data = measurements, aes(x = expr, y = mean, col = mean)) +
geom_bar(stat = "identity")
measurements
str(plot(data$x, data$y, type = "h"))
str(measurements)
as.data.frame(measurements)
summary(measurements)
as.data.frame(summary(measurements))
measurements = as.data.frame(summary(measurements))
ggplot(data = measurements, aes(x = expr, y = mean, col = mean)) +
geom_bar(stat = "identity")
ggplot(data = measurements, aes(x = expr, y = mean)) +
geom_bar(stat = "identity", col = mean)
ggplot(data = measurements, aes(x = expr, y = mean, col = mean)) +
geom_bar(stat = "identity")
ggplot(data = measurements, aes(x = expr, y = mean, col = mean)) +
geom_bar(stat = "identity")
measurements
ggplot(data = measurements, aes(x = expr, y = mean, fill = mean)) +
geom_bar(stat = "identity")
ggplot(data = measurements, aes(x = expr, y = mean, fill = mean)) +
geom_bar(stat = "identity") +
scale_fill_gradient(low = "green", high = "red")
library(ggplot2)
library(lattice)
library(microbenchmark)
data = data.frame(x = runif(100), y = runif(100))
measurements = microbenchmark(
ggplot_point = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_point(),
ggplot_line = ggplot(data = data, aes(x = data$x, y = data$y)) +
geom_line(),
ggplot_bar = ggplot(data = data, aes(
x = data$x, y = data$y, col = data$x
)) +
geom_bar(stat = "identity"),
lattice_point = xyplot(y ~ x, data),
lattice_line = xyplot(y ~ x, data, type = c("smooth")),
lattice_bar = barchart(y ~ x, data),
graphics_point = plot(data$x, data$y, type = "p"),
graphics_line = plot(data$x, data$y, type = "l"),
graphics_barplot = plot(data$x, data$y, type = "h")
)
v = c(1,2,3)
atrr(v)
str(v)
class(v)
attr(v)
attribute(v)
attr(v, )
l = letters[1:3]
attr(l)
?attr
`mostattributes<-`(l)
attributes(data.frame())
attributes(num())
attributes(num(1,2,3))
attributes(numeric(1,2,3))
attributes(numeric()
)
x2 = factor(l)
attributes(x2)
attr(x2)
class(x2)
do_stuff()
do_stuff <- function() {
for(i in 1L:100) {
if(isprime(i)){
browser()
}
just_a_vector <- c(i, i^2, i^3)
print(just_a_vector)
}
}
do_stuff()
install.packages("gmp")
library(gmp)
do_stuff()
continue
do_stuff()
q
i
q
i
q
i
q
q
q
i
q
undebug()
do_stuff()
source('h:/Windows7/Desktop/Programowanie w R dla Zaawansowanych/2020Z-ProgramowanieWR/Materiały/L3/debugging.R')
do_stuff <- function() {
for(i in 1L:100) {
if(isprime(i)){
browser()
}
just_a_vector <- c(i, i^2, i^3)
print(just_a_vector)
}
}
do_stuff()
i
i
q
q
do_stuff()
i
do_stuff <- function() {
for(i in 1L:100) {
if(isprime(i)){
browser()
}
just_a_vector <- c(i, i^2, i^3)
print(just_a_vector)
}
}
do_stuff()
which(sapply(lsf.str(), isdebugged))
debug(do_stuff)
which(sapply(lsf.str(), isdebugged))
lsf.str()
debug(do_stuff)
which(sapply(lsf.str(), isdebugged))
lsf.str()
?lsf.str
promise = future(mtcars)
install.packages("future")
install.packages("promise")
install.packages("promises")
library(future)
library(promises)
promise = future(mtcars)
promise
read.csv(mtcars)
mtcars
iris
data
data()
promise = future(iris)
then(promise)
iris
promise %...>%
filter(Sepal.Length >3) #
promise %...>%
print(nrow(.))
promise = future(iris)
promise
promise = future(iris)
promise %>%
then(function(value) {
cat("The operation completed!\n")
print(value)
})
promise %...>%
print(.)
promise %...>%
print(nrow(.))
promise %...>%
print(Sepal.Length)
promise %...>%
filter(Sepal.Length >3) #
iris %>% filter(Sepal.Length > 3)
iris %>% filter(Sepal.Length > 3)
install.packages("dplyr")
install.packages("dplyr")
library(promises)
library(dplyr)
library(future)
library(promises)
library(dplyr)
# Load package
devtools::install_github("mattflor/chorddiag")
install.packages("devtools")
# Load package
devtools::install_github("mattflor/chorddiag")
library(chorddiag)
# Create dummy data
m <- matrix(c(11975,  5871, 8916, 2868,
1951, 10048, 2060, 6171,
8010, 16145, 8090, 8045,
1013,   990,  940, 6907),
byrow = TRUE,
nrow = 4, ncol = 4)
# A vector of 4 colors for 4 groups
haircolors <- c("black", "blonde", "brown", "red")
dimnames(m) <- list(have = haircolors,
prefer = haircolors)
groupColors <- c("#000000", "#FFDD89", "#957244", "#F26223")
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
p
# save the widget
library(htmlwidgets)
saveWidget(p, file=paste0( getwd(), "/HtmlWidget/chord_interactive.html"))
setwd("H:/Windows7/Desktop/Przetwarzanie i Analiza Danych Tekstowych/relvis")
# save the widget
library(htmlwidgets)
saveWidget(p, file=paste0( getwd(), "/HtmlWidget/chord_interactive.html"))
# save the widget
library(htmlwidgets)
saveWidget(p, file="chord_interactive.html")
# Load package
# devtools::install_github("mattflor/chorddiag")
library(chorddiag)
# Create dummy data
m <- matrix(c(1,  5871, 8916, 2868,
1951, 10048, 2060, 6171,
8010, 16145, 8090, 8045,
1013,   990,  940, 6907),
byrow = TRUE,
nrow = 4, ncol = 4)
# A vector of 4 colors for 4 groups
haircolors <- c("black", "blonde", "brown", "red")
dimnames(m) <- list(have = haircolors,
prefer = haircolors)
groupColors <- c("#000000", "#FFDD89", "#957244", "#F26223")
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
p
# save the widget
library(htmlwidgets)
saveWidget(p, file="chord_interactive.html")
m
data=read.csv("fake_data.csv")
data=read.csv("fake_data.csv")
data=read.matrix(file = "fake_data.csv", header = TRUE, sep = ",", skip = 0)
library(tseries)
install.packages("tseries")
library(tseries)
data=read.matrix(file = "fake_data.csv", header = TRUE, sep = ",", skip = 0)
data=read.matrix(file = "fake_data.csv", header = TRUE, sep = ",", skip = 0)
data
data
data=read.matrix(file = "fake_data.csv", header = TRUE, sep = ",", skip = 0)
data
m
m
m
# Build the chord diagram:
p <- chorddiag(data, groupColors = groupColors, groupnamePadding = 20)
str(data)
str(m)
data=read.matrix(file = "fake_data.csv", header = TRUE, sep = ",", skip = 0)
data
data=read.matrix(file = "fake_data.csv", header = TRUE, sep = ",", skip = 0)
data
data=read.matrix(file = "fake_data.csv", header = TRUE, sep = ",", skip = 0)
data=read.matrix(file = "fake_data.csv", header = TRUE, sep = ",")
data
data=read.matrix(file = "fake_data.csv", header = TRUE, sep = ",")
data
read.matrix(file = "fake_data.csv", sep = ",")
